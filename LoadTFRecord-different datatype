# if you have to import two TFRecords (Dataset) which has different data type
# use this code

import tensorflow as tf
import os
import time
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'

batch_size = 10

def train_input_fn():
    return input_fn(filenames=["train.tfrecord"])

def val_input_fn():
    return input_fn(filenames=["val.tfrecord"])

sess = tf.Session()
sess.run(tf.global_variables_initializer())

def input_fn(filenames):
    dataset = tf.data.TFRecordDataset(filenames=filenames, num_parallel_reads=40)
    dataset = dataset.apply(tf.data.experimental.shuffle_and_repeat(1024, 1))

    def parser(record):
        keys_to_features = {
            "image_raw": tf.FixedLenFeature([], tf.string),
            "label": tf.FixedLenFeature([], tf.int64)
        }
        parsed = tf.parse_single_example(record, keys_to_features)
        image = tf.decode_raw(parsed["image_raw"], tf.uint8)
        image = tf.cast(image, tf.float32)
        label = tf.cast(parsed["label"], tf.int32)

        return image, label

    dataset = dataset.apply(tf.data.experimental.map_and_batch(parser, batch_size))
    dataset = dataset.prefetch(buffer_size=2)
    iterator = tf.data.Iterator.from_structure(dataset.output_types, dataset.output_shapes)

    return dataset, iterator

train_data_set, train_iterator = train_input_fn()
val_data_set, val_iterator, = val_input_fn()

for i in range(2):
    sess.run(train_iterator.make_initializer(train_data_set))

    next_element = train_iterator.get_next()
    for j in range(100):
        try:
            a, b = sess.run(next_element)
            print(b)
        except tf.errors.OutOfRangeError:
            print('train')
            break
    print('============')

    sess.run(val_iterator.make_initializer(val_data_set))

    next_element2 = val_iterator.get_next()
    for j in range(100):
        try:
            a, b = sess.run(next_element2)
            print(b)
        except tf.errors.OutOfRangeError:
            print('val')
            break

    print('===============================')

