# if you import only one TFRecord file

# Reference : https://youtu.be/bqeUmLCgsVw
# Reference : https://www.tensorflow.org/api_docs/python/tf/data/Iterator
# Reference : https://medium.com/ymedialabs-innovation/how-to-use-dataset-and-iterators-in-tensorflow-with-code-samples-3bb98b6b74ab
# Reference : https://www.tensorflow.org/guide/datasets

import tensorflow as tf
import os
import time
import numpy as np
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'

batch_size = 20

def train_input_fn():
    return input_fn(filenames=["train.tfrecord"])

def val_input_fn():
    return input_fn(filenames=["val.tfrecord"])

def input_fn(filenames):
    dataset = tf.data.TFRecordDataset(filenames=filenames, num_parallel_reads=40)
    dataset = dataset.apply(tf.data.experimental.shuffle_and_repeat(1024, 1))

    def parser(record):
        keys_to_features = {
            "image_raw": tf.FixedLenFeature([], tf.string),
            "label": tf.FixedLenFeature([], tf.int64)
        }
        parsed = tf.parse_single_example(record, keys_to_features)
        image = tf.decode_raw(parsed["image_raw"], tf.uint8)
        image = tf.cast(image, tf.float32)                  # change datatype of image to float32
        label = tf.cast(parsed["label"], tf.int32)          # change datatype of label to int32

        return image, label

    dataset = dataset.apply(tf.data.experimental.map_and_batch(parser, batch_size))
    dataset = dataset.prefetch(buffer_size=2)
    iterator = dataset.make_initializable_iterator()

    return iterator

sess = tf.Session()
sess.run(tf.global_variables_initializer())

train_iterator = train_input_fn()
val_iterator = val_input_fn()

for i in range(2):
    sess.run(train_iterator.initializer)
    next_element = train_iterator.get_next()
    for j in range(100):
        try:
            image, label = sess.run(next_element)
            print(label)
        except tf.errors.OutOfRangeError:
            print('train')
            break
    print('============')

    sess.run(val_iterator.initializer)
    next_element = val_iterator.get_next()

    for j in range(100):
        try:
            a, b = sess.run(next_element)
            print(label)
        except tf.errors.OutOfRangeError:
            print('val')
            break
    print('==========================================')
