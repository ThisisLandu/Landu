from random import shuffle
import glob
import sys
import cv2
import numpy as np
# import skimage.io as io
import tensorflow as tf

# Reference : https://youtu.be/bqeUmLCgsVw
# Reference : https://www.tensorflow.org/api_docs/python/tf/data/Iterator
# Reference : https://medium.com/ymedialabs-innovation/how-to-use-dataset-and-iterators-in-tensorflow-with-code-samples-3bb98b6b74ab
# Reference : https://www.tensorflow.org/guide/datasets

resized_image_H = 64
resized_image_W = 64
ratio = 0.7


def _int64_feature(value):    # label datatype
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))


def _bytes_feature(value):    # image datatype
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))


def load_image(addr):
    # cv2 load images as BGR, convert it to RGB
    img = cv2.imread(addr)
    if img is None:
        return None

    img = cv2.resize(img, (resized_image_W, resized_image_H), interpolation=cv2.INTER_CUBIC)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    return img


def createDataRecord(out_filename, addrs, labels):
    # open the TFRecords file
    writer = tf.python_io.TFRecordWriter(out_filename)
    for i in range(len(addrs)):
        # print how many images are saved every 1000 images
        if not i % 1000:
            print('Train data: {}/{}'.format(i, len(addrs)))
            sys.stdout.flush()
        # Load the image
        img = load_image(addrs[i])

        label = labels[i]

        if img is None:
            continue

        # Create a feature
        feature = {
            'image_raw': _bytes_feature(img.tostring()),
            'label': _int64_feature(label)
        }
        # Create an example protocol buffer
        example = tf.train.Example(features=tf.train.Features(feature=feature))

        # Serialize to string and write on the file
        writer.write(example.SerializeToString())

    writer.close()
    sys.stdout.flush()


cat_dog_train_path = 'Images/*/*.png'       # the path where images are saved
# read addresses and labels from the 'train' folder
addrs = glob.glob(cat_dog_train_path)
labels = []

for addr in addrs:      # Labeling

    if 'Black' in addr:
        labels.append(0)  # you ha
        
    elif 'Gray' in addr:
        labels.append(1)
        
    elif 'RGB' in addr:
        labels.append(2)
        
    


c = list(zip(addrs, labels))
shuffle(c)
addrs, labels = zip(*c)

                                                                  #if ratio is set to 0.7
train_addrs = addrs[0: int(ratio * len(addrs))]               #make training data at 70% of all data 
train_labels = labels[0: int(ratio * len(labels))]           
val_addrs = addrs[int(ratio * len(addrs)): int(len(addrs))]   #make val data at the other 30%
val_labels = labels[int(ratio * len(addrs)): int(len(addrs))]


createDataRecord('train.tfrecord', train_addrs, train_labels)    
createDataRecord('val.tfrecord', val_addrs, val_labels)
#createDataRecord('test.tfrecord', test_addrs, test_labels)
